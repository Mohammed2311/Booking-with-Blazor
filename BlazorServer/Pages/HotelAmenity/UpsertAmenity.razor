@page "/hotel-amenity/create"
@page "/hotel-amenity/edit/{id:int}"
@inject IJSRuntime jSRuntime
@inject IHotelAmenity HotelRep
@inject NavigationManager NavigationManager


<div class="row">
    <h3 class="card-title text-info">@Title Hotel Amenity</h3>
    <div class="col-md-12">
        <div>
            <div class="card-body">
                <EditForm Model="HotelAmenity" OnValidSubmit="HandleAmenity">
                    <DataAnnotationsValidator />
                    <div class="form-group">
                        <label> Hotel Amenity Name</label>
                        <InputText @bind-Value=" HotelAmenity.Name" class="form-control"></InputText>
                        <ValidationMessage For="()=>HotelAmenity.Name"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label> Hotel Room Name</label>
                        <InputText @bind-Value=" HotelAmenity.Timming" class="form-control"></InputText>
                        <ValidationMessage For="()=>HotelAmenity.Timming"></ValidationMessage>
                    </div>




                    <div class="form-group">
                        <label> Hotel IconStyle</label>
                        <InputText @bind-Value=" HotelAmenity.IconStyle" class="form-control"></InputText>
                        <ValidationMessage For="()=>HotelAmenity.IconStyle"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label> Hotel Description</label>
                        <InputTextArea @bind-Value=" HotelAmenity.Description" class="form-control"></InputTextArea>
                        <ValidationMessage For="()=>HotelAmenity.Description"></ValidationMessage>
                    </div>

                    <button type="submit" class="btn btn-primary">@Title Hotel</button>
                    <NavLink class="btn btn-info" href="hotel-amenity">back to index</NavLink>
                </EditForm>

            </div>
        </div>

    </div>
</div>
@code {
    [Parameter]
    public int? Id { get; set; }
    HotelAmenityDTO HotelAmenity = new HotelAmenityDTO();
    public string Title { get; set; } = "Create";
    protected async override Task OnInitializedAsync()
    {
        if (Id!=null)
        {
            Title = "Update";
            HotelAmenity = await HotelRep.GetHotelAmenity(Id.Value);

        }
        else
        {
            Title = "Create";
            HotelAmenity = new HotelAmenityDTO();

        }



    }

    private async Task HandleAmenity()
    {
        try
        {
            if (HotelAmenity.Id != 0 && Title == "Update")
            {
                await HotelRep.UpdateHotelAmenity(HotelAmenity);



                await jSRuntime.ToasterSucess("Updated Succefully");

            }
            else
            {

                var amenity = await HotelRep.IsAmenityExists(HotelAmenity.Name);
                if (amenity != null)
                {
                    await jSRuntime.ToasterError("Name is Aready Exist");
                    return;
                }
                await HotelRep.CreateHotelAmenity(HotelAmenity);
                await jSRuntime.ToasterSucess("Create Succefully");


            }
            NavigationManager.NavigateTo("/hotel-amenity");


        }
        catch (Exception ex)
        {
            await jSRuntime.ToasterError(ex.Message);

        }

    }
}
