@page "/hotel-room/create"
@page "/hotel-room/edit/{id:int}"
@inject IHotelRep hotelRep
@inject NavigationManager manger

@inject IRoomImgRep imgRep
@using BlazorServer.Services.IServices
@inject IJSRuntime jsRuntime
@inject IFileUploader fileUploader


<div class="row">
    <h3 class="card-title text-info">@Title Hotel Room</h3>
    <div class="col-md-12">
        <div>
            <div class="card-body">
                <EditForm Model="HotelRoom" OnValidSubmit="HandleHotelRoom">
                    <DataAnnotationsValidator/>
                    <div class="form-group">
                        <label> Hotel Room Name</label>
                        <InputText @bind-Value=" HotelRoom.Name" class="form-control"></InputText>
                        <ValidationMessage For="()=>HotelRoom.Name"></ValidationMessage>
                    </div>
                   
                    <div class="form-group">
                        <label> Hotel Room Occupancy</label>
                        <InputNumber @bind-Value=" HotelRoom.Occupancy" class="form-control"></InputNumber>
                        <ValidationMessage For="()=>HotelRoom.Occupancy"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label> Hotel Room RegularRate</label>
                        <InputNumber @bind-Value=" HotelRoom.RegularRate" class="form-control"></InputNumber>
                        <ValidationMessage For="()=>HotelRoom.RegularRate"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label> Hotel Room SqFt</label>
                        <InputText @bind-Value=" HotelRoom.SqFt" class="form-control"></InputText>
                        <ValidationMessage For="()=>HotelRoom.SqFt"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label> Hotel Room Details</label>
                        <InputTextArea @bind-Value=" HotelRoom.Details" class="form-control"></InputTextArea>
                        <ValidationMessage For="()=>HotelRoom.Details"></ValidationMessage>
                    </div>
                    <div class="form-group">

                        <InputFile OnChange="HandleImgUpload" multiple></InputFile>
                        <div class="row">
                            @if (IsProgressed)
                            {
                            <div class="col-md-12">

                                <i class="material-icons spinner text-success  opacity-10">
                                    settings
                                </i>
                            </div>
                            }
                            @if (HotelRoom.ImageUrls != null && HotelRoom.ImageUrls.Count > 0)
                            {
                                int ser = 1;
                                foreach (var item in HotelRoom.ImageUrls)
                                {
                            <div class="col-md-2 mt-2">
                                <div class="room-img" style="background:url(@item) 50% 50%">
                                    <span>@ser</span>
                                </div>


                                <button type="button" class="btn btn-danger mt-4" @onclick ="()=>HandleDeleteImg(item)">Delete</button>

                                @{ser++;}
                            </div>
                                    
                                }
                            }
                        </div>
                    </div>
                    <button class="btn btn-primary" >@Title Room</button>
                    <NavLink class="btn btn-info" href="hotel-room ">back to index</NavLink>
                </EditForm>
                
            </div>
        </div>

    </div>
</div>
@code {
    [Parameter]
    public int? Id { get; set; }
    public string Title { get; set; } = "Create";
    public HotelRoomDTO HotelRoom { get; set; } = new HotelRoomDTO();
    public HotelRoomImageDTO RoomImg { get; set; } = new HotelRoomImageDTO();
    public int RId { get; set; }

    public bool IsProgressed { get; set; } = false;

    public List<string> DeletedImgs { get; set; } = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        if (Id!=null)
        {
            Title = "Update";
            HotelRoom = await hotelRep.GetHotelRoom(Id.Value);
            if (HotelRoom?.HotelRoomImages != null)
            {
                HotelRoom.ImageUrls = HotelRoom.HotelRoomImages.Select(i => i.ImgUrl).ToList();
            }

        }
        else
        {
            HotelRoom = new HotelRoomDTO();
            Title ="Create";
        }
    }
    private async Task HandleHotelRoom()
    {
        try
        {
            if (HotelRoom.Id !=0&&Title== "Update")
            {
                //update
                var updatedRoom =  await hotelRep.UpdateHotelRoom(HotelRoom);
                if (HotelRoom.ImageUrls!=null &&HotelRoom.ImageUrls.Any())
                {
                    if (DeletedImgs!=null && DeletedImgs.Any())
                    {
                        foreach (var item in DeletedImgs)
                        {
                            var imgName = item.Replace($"{manger.BaseUri}RoomImgs/", "");
                            var res = fileUploader.DeleteFile(imgName);
                            await imgRep.DealeteHotelRoomImageByImgName(item);

                        }
                    }
                    await AddHotelRoomImg(updatedRoom);
                }
                await jsRuntime.ToasterSucess("Updated sucessfully");

                manger.NavigateTo("hotel-room");

            }
            if (HotelRoom.Id==0 &&Title== "Create")
            {
                //create
                var isUnique = await hotelRep.IsHotelExists(HotelRoom.Name);
                if (isUnique != null)
                {
                    await jsRuntime.ToasterError("There is another room by this name");
                }
                else
                {
                    var createdRoom = await hotelRep.CreateHotelRoom(HotelRoom);

                    await AddHotelRoomImg(createdRoom);
                    await jsRuntime.ToasterSucess("Created sucessfully");



                    manger.NavigateTo("hotel-room");
                }
            }
        }
        catch (Exception ex)
        {

            throw ex;
        }


    }

    private async Task AddHotelRoomImg(HotelRoomDTO roomDTO)
    {

        foreach (var item in HotelRoom.ImageUrls)
        {
            if ( Title=="Create")
            {
                RoomImg = new HotelRoomImageDTO()
                {
                    ImgUrl = item,
                    RoomId = roomDTO.Id,

                };

                await imgRep.CreateHotelRoomImage(RoomImg);
            }
            else
            {
                if (HotelRoom.HotelRoomImages.Where(x => x.ImgUrl == item).Count() == 0)
                {
                    RoomImg = new HotelRoomImageDTO()
                    {
                        ImgUrl = item,
                        RoomId = roomDTO.Id,

                    };

                    await imgRep.CreateHotelRoomImage(RoomImg);

                }
            }


        }
    }

    private async Task HandleImgUpload(InputFileChangeEventArgs e)
    {
        try
        {
            var imgs = new List<string>();
            IsProgressed = true;
            if (e.GetMultipleFiles().Count > 0)
            {
                foreach (var item in e.GetMultipleFiles())
                {
                    System.IO.FileInfo fileInfo = new System.IO.FileInfo(item.Name);
                    if (fileInfo.Extension.ToLower() == ".jpg" || fileInfo.Extension.ToLower() == ".jpeg" || fileInfo.Extension.ToLower() == ".png")
                    {
                        var filePath = await fileUploader.UploadFile(item);
                        imgs.Add(filePath);
                    }
                    else
                    {
                        await jsRuntime.ToasterError("Select .Jpg  , png , jpg");

                    }
                }
                // اللي فوق متملتش array الايرور هنا هيحصل ان ال
                //    بمعني اني معرفتش اعمل ابلود للصور 
                if (imgs.Any())
                {
                    if (HotelRoom.ImageUrls != null && HotelRoom.ImageUrls.Any())
                    {
                        HotelRoom.ImageUrls.AddRange(imgs);
                    }
                    else
                    {
                        HotelRoom.ImageUrls = new List<string>();
                        HotelRoom.ImageUrls.AddRange(imgs);
                    }
                }
                else
                {
                    await jsRuntime.ToasterError("Can't Upload Photos");
                }

            }
            IsProgressed = false;

        }
        catch (Exception ex)
        {

            await jsRuntime.ToasterError(ex.Message);
        }
    }
    private async Task HandleDeleteImg(string imgUrl)
    {
        try
        {
            var imgIndex = HotelRoom.ImageUrls.FindIndex(x => x == imgUrl);
            var imgName = imgUrl.Replace($"{manger.BaseUri}RoomImgs/", "");
            if (HotelRoom.Id==0 &&Title == "Create")
            {
                fileUploader.DeleteFile(imgName);

            }
            else if(HotelRoom.Id != 0 && Title == "Update")
            {
                DeletedImgs??= new List<string>();
                DeletedImgs.Add(imgUrl);

            }
            HotelRoom.ImageUrls.RemoveAt(imgIndex);
        }
        catch (Exception ex)
        {

            await jsRuntime.ToasterError(ex.Message);
        }
    }
}
